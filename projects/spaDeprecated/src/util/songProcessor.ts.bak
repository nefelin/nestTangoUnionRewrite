// Not using this because I cant figure out simple way to run as shell script and share types because module type differs. Just pasted all relevant types + functions into the processor for now
import { RawSong, SloppedSong } from "../indexer/types";
import {
  IndexedCategory,
  MemberToTracks,
  SelectIndex,
} from "../indexer/categoryIndex";
import { cleanSlop } from "../indexer/fuzzyIndex";
import * as r from "ramda";

export interface IndexedSongData {
  songs: SloppedSong[];
  selectIndex: SelectIndex;
}

export const process = (rawSongs: RawSong[]): IndexedSongData => {
  const songs = rawSongs.map(songWithSlop);
  const selectIndex = makeSelectIndex(rawSongs);

  return {
    songs,
    selectIndex,
  };
};

// slop stuff
const valuesForSlop = (song: RawSong) =>
  Object.values(r.omit(["length", "id"], song)).join(" ");
const slopFromSong = r.pipe(valuesForSlop, cleanSlop);
const songWithSlop = (song: RawSong) => ({ ...song, slop: slopFromSong(song) });

// selectIndex stuff
const makeSelectIndex = (allSongs: RawSong[]): SelectIndex => {
  let options: Record<IndexedCategory, MemberToTracks> = {
    orchestra: {},
    genre: {},
    singer: {},
  };

  const genreNames = {
    tango: "tango",
    vals: "vals",
    milonga: "milonga",
    other: "other",
  };

  const getIndexGenre = (genre: string) => {
    if (r.contains(genreNames.tango)(genre)) return genreNames.tango;
    if (r.contains(genreNames.vals)(genre)) return genreNames.vals;
    if (r.contains(genreNames.milonga)(genre)) return genreNames.milonga;

    return genreNames.other;
  };

  for (let { id, singer, orchestra, genre } of allSongs) {
    if (singer !== "") {
      options.singer = {
        ...options.singer,
        [singer]: [...(options.singer[singer] || []), id],
      };
    }
    if (orchestra !== "") {
      options.orchestra = {
        ...options.orchestra,
        [orchestra]: [...(options.orchestra[orchestra] || []), id],
      };
    }

    const indexGenre = getIndexGenre(genre);
    options.genre = {
      ...options.genre,
      [indexGenre]: [...(options.genre[indexGenre] || []), id],
    };
  }

  return options;
};
